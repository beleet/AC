language core;

// a constant function, specialized to Nat
fn Nat2Nat::const(f : fn(Nat) -> Nat) -> (fn(Nat) -> (fn(Nat) -> Nat)) {
  return fn(x : Nat) { return f; };
}

// addition of natural numbers
fn Nat::add(n : Nat) -> (fn(Nat) -> Nat) {
  return fn(m : Nat) {
    return Nat::rec(n, m, fn(i : Nat) {
      return fn(r : Nat) { return succ(r); }; });
  };
}

// multiplication of natural numbers
fn Nat::mul(n : Nat) -> (fn(Nat) -> Nat) {
  return fn(m : Nat) {
    return Nat::rec(n, 0, Nat2Nat::const(Nat::add(m)));
  };
}

fn double(n : Nat) -> Bool {
  	return Nat::mul(n)(succ(succ(0)));
}

fn main(n : Nat) -> Nat {
  return double(n);
}

